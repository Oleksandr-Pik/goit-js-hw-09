{"mappings":"iiBAaA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,IAAMC,EAAW,IAAIC,SAASH,EAAMI,SAQtC,SAAwBC,EAAYC,EAAMC,GACxC,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAEnCrB,EAAcqB,EADOH,GAAcG,EAAI,GAAKF,GAEzCG,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAEjBsB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAEvE0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAElBsB,EAAA1B,GAAS2B,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,KAbzE4B,CAJmBC,OAAOhB,EAASiB,IAAI,UAC1BD,OAAOhB,EAASiB,IAAI,SAClBD,OAAOhB,EAASiB,IAAI,W","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// Бібліотека повідомлень\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const formData = new FormData(event.target);\n  const firstDelay = Number(formData.get('delay'));\n  const step = Number(formData.get('step'));\n  const amount = Number(formData.get('amount'));\n\n  createPromises(firstDelay, step, amount);\n});\n\nfunction createPromises(firstDelay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    const currentDelay = firstDelay + (i - 1) * step;\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","formData","FormData","target","firstDelay","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromises","Number","get"],"version":3,"file":"03-promises.3b4ffd09.js.map"}